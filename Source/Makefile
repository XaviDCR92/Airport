# Project-wise definitions
PROJECT = AIRPORT

# Make flags
MAKEFLAGS := -j$(NUMBER_OF_PROCESSORS)

# GNU Toolchain definitions
CC = psx-gcc
LINKER = psx-gcc
GNU_SIZE = mipsel-unknown-elf-size

# Custom define flags for GCC
DEFINE= -DFIXMATH_FAST_SIN -D_PAL_MODE_
DEFINE += -DPSXSDK_DEBUG
DEFINE +=  -DNO_CDDA
DEFINE +=  -DNO_INTRO

# Compiler flags
LIBS= -lfixmath
CC_FLAGS = -Wall -Werror -c -Os -Wfatal-errors -g

# Path definitions
PSXSDK_PATH = /usr/local/psxsdk
PATH := $(PATH):$(PSXSDK_PATH)/bin/
PROJECT_DIR = ~/$(PROJECT)
CDROM_ROOT=$(PROJECT_DIR)/cdimg
BIN_TARGET_PATH = $(PROJECT_DIR)/Bin

#Uncomment this DEFINE below to use Airport together with OpenSend + QPSXSerial toolchain.
#DEFINE +=  -DSERIAL_INTERFACE

# PSXSDK tools definitions
# ELF2EXE:
ELF2EXE = elf2exe
ELF2EXE_FLAGS = -mark="A homebrew game created with PSXSDK"
LICENSE_FILE = /usr/local/psxsdk/share/licenses/infoeur.dat
EXE_PATH = Exe

# PCSX-R
EMULATOR_DIR = ~/pcsxr
EMULATOR = pcsxr.exe
# Uncomment the line below if you get no sound output under Linux.
#SOUND_INTERFACE += padsp
EMULATOR_FLAGS = -nogui -psxout

# Objects definition
# Compiled objects list
OBJ_DIR = Obj
SRC_DIR = .
OBJECTS = $(addprefix $(OBJ_DIR)/,main.o System.o Menu.o Gfx.o Pad.o MainMenuBtnAni.o 	\
	LoadMenu.o GameGui.o Sfx.o Camera.o EndAnimation.o			\
	PSXSDKIntro.o PltParser.o Game.o Font.o MemCard.o			\
	Aircraft.o Serial.o Timer.o)
		
# Source dependencies:
DEPS = $(OBJECTS:.o=.d)

# CD-DA objects:
MUSIC_TRACKS = --track=../Bin/TRACK01.bin --track=../Bin/TRACK02.bin --track=../Bin/TRACK03.bin
FFMPEG = ffmpeg
FFMPEG_DIR = ../Music/ffmpeg/bin
FFMPEG_FLAGS = -f s16le -acodec pcm_s16le

# VAG objects:
SOURCE_SOUNDS_FOLDER = ../Sounds
SOUNDS_FOLDER = ../cdimg/DATA/SOUNDS
SOUND_OBJECTS = $(addprefix $(SOUNDS_FOLDER)/,	BELL.VAG		\
												ACCEPT.VAG		\
												TRAYCL.VAG		\
												SPINDISK.VAG	\
												BEEP.VAG		\
												TAKEOFF1.VAG	\
												RCTM1F1.VAG		\
												RCPW1A1.VAG		\
												RCPM1A1.VAG		)
# Level objects:
SRC_LEVELS_DIR = $(PROJECT_DIR)/Levels
OBJ_LEVELS_DIR = $(CDROM_ROOT)/DATA/LEVELS
LEVEL_OBJECTS = $(addprefix $(OBJ_LEVELS_DIR)/, LEVEL1.LVL LEVEL1.PLT)

# ------------------------------------
# Instructions
# ------------------------------------

build: $(BIN_TARGET_PATH)/$(PROJECT).bin

rebuild:
	make clean
	make build

-include $(DEPS)
			
music_objects:	$(addprefix ../Music/, TRACK01.bin TRACK02.bin TRACK03.bin)
			
clean:
	rm -f Obj/*.o
	rm -f $(CDROM_ROOT)/DATA/SOUNDS/*.VAG
	rm -f $(CDROM_ROOT)/DATA/LEVELS/*.LVL
	rm -f $(CDROM_ROOT)/DATA/LEVELS/*.PLT
	
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(OBJ_DIR)/%.d
	$(CC) $< -o $@ $(DEFINE) $(CC_FLAGS) -MMD
	
$(EXE_PATH)/$(PROJECT).elf: $(OBJECTS)
	$(LINKER) $^ -o $@ $(LIBS) -Wl,--gc-sections

$(EXE_PATH)/$(PROJECT).iso: $(EXE_PATH)/$(PROJECT).exe $(SOUND_OBJECTS) $(LEVEL_OBJECTS)
	mkisofs -o $@ -V $(PROJECT) -sysid PLAYSTATION $(CDROM_ROOT)

$(BIN_TARGET_PATH)/$(PROJECT).bin: $(EXE_PATH)/$(PROJECT).iso
	mkpsxiso $< $@ $(LICENSE_FILE) $(MUSIC_TRACKS)
# $(PROJECT).cue is automatically generated by mkpsxiso
	
$(EXE_PATH)/$(PROJECT).exe: $(EXE_PATH)/$(PROJECT).elf
	$(ELF2EXE) $< $@ $(ELF2EXE_FLAGS)
	cp $@ $(CDROM_ROOT)
	
#~ emulator:
#~ 	export PATH=$$PATH:$(EMULATOR_DIR)
#~ 	$(EMULATOR) -cdfile $(PROJECT_DIR)/Bin/$(PROJECT).bin $(EMULATOR_FLAGS)

tiles:
	rm -f ../cdimg/DATA/SPRITES/*.TIM
	rm -f ../cdimg/DATA/FONTS/*.FNT
	bmp2tim ../Sprites/PSXDisk.bmp 			../cdimg/DATA/SPRITES/PSXDISK.TIM 16 -org=384,0 -mpink
	bmp2tim ../Sprites/IntroFnt.bmp 		../cdimg/DATA/SPRITES/INTROFNT.TIM 16 -org=384,76 -mpink
	bmp2tim ../Sprites/Tileset1.bmp 		../cdimg/DATA/SPRITES/TILESET1.TIM 16 -org=384,0 -mpink
	bmp2tim ../Sprites/Tileset2.bmp 		../cdimg/DATA/SPRITES/TILESET2.TIM 16 -org=640,0 -mpink
	bmp2tim ../Sprites/MainMenu.bmp 		../cdimg/DATA/SPRITES/MAINMENU.TIM 16 -org=768,384 -mpink
	bmp2tim ../Sprites/Loading.bmp 			../cdimg/DATA/SPRITES/LOADING.TIM 4 -mpink -org=768,256 -clut=384,496
	bmp2tim ../Sprites/Plane.bmp 			../cdimg/DATA/SPRITES/PLANE.TIM 16 -org=536,240 -mpink	
	bmp2tim ../Sprites/Buttons.bmp 			../cdimg/DATA/SPRITES/BUTTONS.TIM 16 -org=384,240 -mpink
	bmp2tim ../Sprites/GamePln.bmp 			../cdimg/DATA/SPRITES/GAMEPLN.TIM 8 -mpink -org=800,256 -clut=384,497
	bmp2tim ../Sprites/GamePln_Blue.bmp 	../cdimg/DATA/SPRITES/PLNBLUE.CLT 8 -mpink -clut=384,501
	bmp2tim ../Sprites/Bubble.bmp 			../cdimg/DATA/SPRITES/BUBBLE.TIM 8 -org=584,240 -mpink -clut=384,498
	bmp2tim ../Sprites/Font_1_4bit.bmp		../cdimg/DATA/FONTS/FONT_1.FNT 4 -org=960,256 -mpink -clut=384,500
	bmp2tim ../Sprites/Font_2_4bit.bmp		../cdimg/DATA/FONTS/FONT_2.FNT 4 -org=768,288 -mpink -clut=384,499
	bmp2tim ../Sprites/GPL_4bit.bmp			../cdimg/DATA/SPRITES/GPL.TIM 4 -org=384,174 -mpink -clut=384,502
	bmp2tim ../Sprites/OpSrc_8bit.bmp		../cdimg/DATA/SPRITES/OPENSRC.TIM 8 -org=464,0 -mpink -clut=384,503
	bmp2tim ../Sprites/Mouse.bmp			../cdimg/DATA/SPRITES/MOUSE.TIM 16 -org=596,240 -mpink
	bmp2tim ../Sprites/DepArr.bmp			../cdimg/DATA/SPRITES/DEPARR.TIM 16 -org=552,240 -mpink
	bmp2tim ../Sprites/PageUpDn.bmp			../cdimg/DATA/SPRITES/PAGEUPDN.TIM 16 -org=504,240 -mpink
	bmp2tim ../Sprites/Bldngs1.bmp			../cdimg/DATA/SPRITES/BLDNGS1.TIM 16 -org=640,128 -mpink
	bmp2tim ../Sprites/Arrow.bmp			../cdimg/DATA/SPRITES/ARROW.TIM 16 -org=604,240 -mpink
	bmp2tim ../Sprites/MenuStar_4_bit.bmp	../cdimg/DATA/SPRITES/MENUSTAR.TIM	4 -org=

$(SOUNDS_FOLDER)/%.VAG: $(SOURCE_SOUNDS_FOLDER)/%.wav
	wav2vag $^	$@

$(OBJ_LEVELS_DIR)/%.LVL: $(SRC_LEVELS_DIR)/%.LVL
	cp $^ $@
$(OBJ_LEVELS_DIR)/%.PLT: $(SRC_LEVELS_DIR)/%.PLT
	cp $^ $@

music: clean_music music_objects

clean_music:
	rm -f ../Music/*.bin

%.bin: %.mp3
	rm -f ../Bin/$@1
	$(FFMPEG) -i $< $(FFMPEG_FLAGS) $@
	cp ../Music/$@ ../Bin/

# ----------------------------------------
# Phony targets
# ----------------------------------------
.PHONY: build sounds clean music levels tiles
